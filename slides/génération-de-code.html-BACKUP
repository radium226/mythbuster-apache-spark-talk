<section>
  <h1>Interlude • La génération de code</h1>
</section>

<section>
  <pre class="bigger-code scala"><code data-trim data-noescape>
case class JavaClassSource(
  name: JavaClassName, code: JavaClassCode
) {

  def writeCodeTo(folderPath: Path): Try[Path] = ???

}
  </code></pre>
  <pre class="bigger-code scala"><code data-trim data-noescape>
trait JavaClassCompiler {

  def compile(javaClassSource: JavaClassSource): Try[Class[_]]

}
    </code></pre>
</section>

<section>
  <pre class="bigger-code scala"><code data-trim data-noescape>
object JavacJavaClassCompiler extends JavaClassCompiler {

  override def compile(source: JavaClassSource): Try[Class[_]] = {
    val classFolderPath = Files
      .createTempDirectory("generated-classes")
    val sourceFolderPath = Files
      .createTempDirectory("generated-sources")

    for {
      sourceFilePath <- source
                          .writeCodeTo(sourceFolderPath)
      _ <- javac(sourceFilePath, classFolderPath)
      loadedClass <- loadClass(javaClassSource, classFolderPath)
    } yield loadedClass
  }

}
  </code></pre>
</section>

<section>
  <pre class="bigger-code scala"><code data-trim data-noescape>
def javac(classSourceFilePath: Path,
          classFolderPath: Path): Try[String] = {
  val output = new StringBuilder
  val appendToOutput: (String => Unit) = { line =>
    output.append(s"$line\n")
  }
  val processLogger = ProcessLogger(
    appendToOutput,
    appendToOutput
  )
  Seq(
    "javac", "-verbose",
    "-cp", javaClassPath().map(_.toString)
             .mkString(pathSeparator),
    "-d", classFolderPath.toString,
    classSourceFilePath.toString
  ) ! processLogger match {
    case statusCode if statusCode == 0 =>
      Success(stdout.toString)
    case _ =>
      Failure(new JavaClassCompilerException(output.toString))
  }
}
  </code></pre>
</section>

<section>
  <pre class="bigger-code scala"><code data-trim data-noescape>
def loadClass(javaClassSource: JavaClassSource,
              classFolderPath: Path): Try[Class[_]] = {
  Try {
    val parentClassLoader = getClass.getClassLoader
    val classFolderURL = classFolderPath.toUri.toURL
    val classLoader = new URLClassLoader(
      Array(classFolderURL),
      parentClassLoader
    )
    classLoader.loadClass(javaClassSource.name)
  }
}
  </code></pre>
</section>

<section>
  <pre class="bigger-code java"><code data-trim data-noescape>
    package demo;

    public interface Talker {

        String talk();

    }
  </code></pre>
</section>

<section>
  <pre class="bigger-code scala"><code data-trim data-noescape>
val classCode: JavaClassCode =
    """package demo;
      |
      |public class TalkerImpl implements Talker {
      |
      | public TalkerImpl() {
      |   super();
      | }
      |
      | @Override
      | public String talk() {
      |   return "Hello, World! ";
      | }
      |
      |}
      |
    """.stripMargin
  </code></pre>
</section>

<section>
  <pre class="bigger-code scala"><code data-trim data-noescape>
val classSource = JavaClassSource("demo.TalkerImpl", classCode)
classSource.compile().foreach({ compiledClass =>
  val talker = compiledClass.newInstance()
                 .asInstanceOf[Talker]

  println(talker.talk())
})

// Hello, World!
  </code></pre>
</section>
